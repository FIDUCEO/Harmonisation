"""
Test of MatchUpData Class
"""

'''___Built-In Modules___'''
import sys
from os.path import dirname
import unittest

'''___Third-Party Modules___'''
from numpy import array, nan, bool_

'''___NPL Modules___'''
tools_directory = dirname(dirname(__file__))
sys.path.append(tools_directory)
from AVHRR_to_updated_spec import return_valid_averages_mask

'''___Authorship___'''
__author__ = "Sam Hunt"
__created__ = "18/11/2017"
__credits__ = ["Peter Harris"]
__version__ = "0.0"
__maintainer__ = "Sam Hunt"
__email__ = "sam.hunt@npl.co.uk"
__status__ = "Development"


class TestAVHRRToUpdatedSpec(unittest.TestCase):
    def test_return_valid_averages_mask_ss(self):
        """
        Test for function to return mask of averages composed by full averaging kernel
        - ss match-up style input data
        """

        ################################################################################################################
        # 1. Define input data
        ################################################################################################################

        u11 = array([[1.0, nan, 1.0],
                     [1.0, 1.0, 1.0],
                     [1.0, 1.0, 1.0],
                     [1.0, 1.0, 1.0],
                     [1.0, 1.0, 1.0],
                     [1.0, 1.0, 1.0],
                     [1.0, 1.0, 1.0],
                     [1.0, 1.0, 1.0],
                     [1.0, 1.0, 1.0],
                     [1.0, nan, 1.0]])
        u12 = array([[1.0, nan, 1.0],
                     [1.0, 1.0, 1.0],
                     [1.0, 1.0, 1.0],
                     [1.0, 1.0, 1.0],
                     [1.0, 1.0, 1.0],
                     [1.0, 1.0, 1.0],
                     [1.0, 1.0, 1.0],
                     [1.0, 1.0, 1.0],
                     [1.0, 1.0, 1.0],
                     [1.0, 1.0, 1.0]])
        u21 = array([[1.0, nan, nan],
                     [1.0, nan, 1.0],
                     [1.0, 1.0, 1.0],
                     [1.0, 1.0, nan],
                     [1.0, 1.0, 1.0],
                     [1.0, 1.0, 1.0],
                     [1.0, 1.0, 1.0],
                     [1.0, 1.0, 1.0],
                     [1.0, 1.0, 1.0],
                     [1.0, 1.0, 1.0]])
        u22 = array([[1.0, 1.0, nan],
                     [1.0, 1.0, 1.0],
                     [1.0, 1.0, 1.0],
                     [1.0, 1.0, 1.0],
                     [1.0, 1.0, nan],
                     [1.0, 1.0, 1.0],
                     [1.0, 1.0, 1.0],
                     [1.0, 1.0, 1.0],
                     [1.0, 1.0, 1.0],
                     [1.0, nan, 1.0]])

        ################################################################################################################
        # 2. Define expected output
        ################################################################################################################

        valid_averages_mask_expected = array([False, False, True, False, False, True, True, True, True, False], dtype=bool_)

        ################################################################################################################
        # 3. Valid averages mask function
        ################################################################################################################

        valid_averages_mask_test = return_valid_averages_mask(u11, u12, u21, u22)

        ################################################################################################################
        # 3. Compare output
        ################################################################################################################

        self.assertEqual(valid_averages_mask_expected.tolist(), valid_averages_mask_test.tolist())

    def test_return_valid_averages_mask_rs(self):
        """
        Test for function to return mask of averages composed by full averaging kernel
        - reference-sensor match-up style input data
        """

        ################################################################################################################
        # 1. Define input data
        ################################################################################################################

        u11 = array([[0.0, 0.0, 0.0],
                     [0.0, 0.0, 0.0],
                     [0.0, 0.0, 0.0],
                     [0.0, 0.0, 0.0],
                     [0.0, 0.0, 0.0],
                     [0.0, 0.0, 0.0],
                     [0.0, 0.0, 0.0],
                     [0.0, 0.0, 0.0],
                     [0.0, 0.0, 0.0],
                     [0.0, 0.0, 0.0]])
        u12 = array([[0.0, 0.0, 0.0],
                     [0.0, 0.0, 0.0],
                     [0.0, 0.0, 0.0],
                     [0.0, 0.0, 0.0],
                     [0.0, 0.0, 0.0],
                     [0.0, 0.0, 0.0],
                     [0.0, 0.0, 0.0],
                     [0.0, 0.0, 0.0],
                     [0.0, 0.0, 0.0],
                     [0.0, 0.0, 0.0]])
        u21 = array([[1.0, nan, nan],
                     [1.0, nan, 1.0],
                     [1.0, 1.0, 1.0],
                     [1.0, 1.0, 1.0],
                     [1.0, 1.0, 1.0],
                     [1.0, 1.0, 1.0],
                     [1.0, 1.0, 1.0],
                     [1.0, 1.0, 1.0],
                     [1.0, 1.0, 1.0],
                     [1.0, 1.0, 1.0]])
        u22 = array([[1.0, 1.0, nan],
                     [1.0, 1.0, 1.0],
                     [1.0, 1.0, 1.0],
                     [1.0, 1.0, 1.0],
                     [1.0, 1.0, nan],
                     [1.0, 1.0, 1.0],
                     [1.0, 1.0, 1.0],
                     [1.0, 1.0, 1.0],
                     [1.0, 1.0, 1.0],
                     [1.0, 1.0, 1.0]])

        ################################################################################################################
        # 2. Define expected output
        ################################################################################################################

        valid_averages_mask_expected = array([False, False, True, True, False, True, True, True, True, True], dtype=bool_)

        ################################################################################################################
        # 3. Valid averages mask function
        ################################################################################################################

        valid_averages_mask_test = return_valid_averages_mask(u11, u12, u21, u22, label=nan)

        ################################################################################################################
        # 3. Compare output
        ################################################################################################################

        self.assertEqual(valid_averages_mask_expected.tolist(), valid_averages_mask_test.tolist())

if __name__ == '__main__':
    unittest.main()
